// Code generated by goyacc -o parse.go parse.y. DO NOT EDIT.

//line parse.y:2

package main

import __yyfmt__ "fmt"

//line parse.y:3

import "strconv"

//line parse.y:9
type yySymType struct {
	yys       int
	tok       Token
	idval     idval
	num       uint32
	symlist   []rpc_sym
	def       rpc_sym
	cnst      rpc_const
	constlist []rpc_const
	decl      rpc_decl
	decllist  []rpc_decl
	ufield    rpc_ufield
	ubody     rpc_union
	arrayqual struct {
		qual  qual_t
		bound idval
	}
	prog    rpc_program
	vers    rpc_vers
	proc    rpc_proc
	comment string
}

const T_ID = 57346
const T_NUM = 57347
const T_CONST = 57348
const T_STRUCT = 57349
const T_UNION = 57350
const T_ENUM = 57351
const T_TYPEDEF = 57352
const T_PROGRAM = 57353
const T_NAMESPACE = 57354
const T_BOOL = 57355
const T_UNSIGNED = 57356
const T_INT = 57357
const T_HYPER = 57358
const T_FLOAT = 57359
const T_DOUBLE = 57360
const T_QUADRUPLE = 57361
const T_VOID = 57362
const T_VERSION = 57363
const T_SWITCH = 57364
const T_CASE = 57365
const T_DEFAULT = 57366
const T_OPAQUE = 57367
const T_STRING = 57368

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_ID",
	"T_NUM",
	"T_CONST",
	"T_STRUCT",
	"T_UNION",
	"T_ENUM",
	"T_TYPEDEF",
	"T_PROGRAM",
	"T_NAMESPACE",
	"T_BOOL",
	"T_UNSIGNED",
	"T_INT",
	"T_HYPER",
	"T_FLOAT",
	"T_DOUBLE",
	"T_QUADRUPLE",
	"T_VOID",
	"T_VERSION",
	"T_SWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_OPAQUE",
	"T_STRING",
	"';'",
	"','",
	"'{'",
	"'}'",
	"'='",
	"'('",
	"')'",
	"':'",
	"'*'",
	"'<'",
	"'>'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parse.y:456

func nonEmpty(args ...string) string {
	for i := range args {
		if args[i] != "" {
			return args[i]
		}
	}
	return ""
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 233

var yyAct = [...]int{
	27, 32, 112, 125, 23, 62, 115, 68, 127, 50,
	67, 83, 76, 1, 75, 107, 78, 78, 77, 18,
	20, 21, 22, 108, 41, 146, 52, 139, 40, 148,
	111, 29, 30, 28, 131, 53, 54, 34, 35, 33,
	36, 37, 38, 39, 73, 63, 128, 129, 150, 25,
	26, 130, 71, 132, 90, 84, 61, 51, 109, 89,
	43, 79, 48, 103, 100, 119, 46, 81, 80, 110,
	60, 47, 45, 42, 92, 91, 149, 88, 153, 63,
	63, 44, 147, 94, 96, 145, 120, 99, 98, 97,
	93, 63, 102, 57, 101, 105, 56, 86, 72, 104,
	69, 65, 106, 11, 13, 14, 12, 15, 16, 10,
	55, 117, 128, 129, 49, 117, 84, 58, 59, 40,
	64, 122, 113, 19, 123, 52, 17, 85, 133, 40,
	63, 136, 144, 140, 138, 135, 87, 74, 34, 35,
	33, 36, 37, 38, 39, 142, 116, 31, 95, 126,
	151, 40, 124, 152, 29, 30, 28, 143, 141, 114,
	34, 35, 33, 36, 37, 38, 39, 137, 40, 82,
	128, 129, 25, 26, 134, 24, 70, 34, 35, 33,
	36, 37, 38, 39, 118, 66, 40, 9, 7, 29,
	30, 28, 6, 8, 121, 34, 35, 33, 36, 37,
	38, 39, 40, 3, 4, 5, 2, 25, 26, 0,
	40, 34, 35, 33, 36, 37, 38, 39, 118, 34,
	35, 33, 36, 37, 38, 39, 11, 13, 14, 12,
	15, 16, 10,
}

var yyPact = [...]int{
	-1000, 220, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	122, 119, 119, 119, 119, 182, 119, 44, 29, -1000,
	43, 42, 92, -1000, 22, 121, 121, -1000, 43, 42,
	92, -1000, -1000, -1000, -1000, 102, -1000, -1000, -1000, -1000,
	-1000, 41, -1000, 115, 74, 119, 73, 182, 71, 12,
	-20, 121, -1000, -20, -19, -1000, -1000, -1000, -1000, -1000,
	95, 97, 70, -1000, -1000, -1000, 49, -1000, 28, -1000,
	24, -1000, -1000, 206, 63, -1000, -1000, 115, 115, 62,
	61, 60, 34, -1000, 119, -1000, -1000, 33, 119, 115,
	-1000, -1000, 121, -1000, -24, -14, -1000, -1000, -1000, -1000,
	27, -1000, 40, -1000, -1000, -1000, -3, -1000, -1000, 117,
	198, 36, 59, -1000, 164, -1000, 119, -1000, -1000, 89,
	-1000, 20, -1000, 2, 23, -1000, 147, -1000, 115, -7,
	117, 125, -1000, -1000, -1000, -1000, -1000, 58, -9, -1000,
	55, -4, -1000, 48, -1000, -1000, -1000, -1000, 17, 206,
	117, -1000, 51, -1000,
}

var yyPgo = [...]int{
	0, 206, 205, 204, 203, 193, 192, 188, 187, 81,
	185, 10, 66, 176, 4, 175, 174, 169, 11, 159,
	6, 158, 157, 152, 62, 149, 3, 9, 7, 1,
	5, 148, 0, 147, 8, 146, 2, 12, 14, 137,
	136, 13,
}

var yyR1 = [...]int{
	0, 41, 41, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 9, 10, 10, 11, 11, 40, 40,
	6, 12, 13, 13, 7, 24, 23, 23, 26, 25,
	25, 34, 34, 16, 16, 5, 14, 14, 14, 14,
	37, 38, 38, 39, 39, 15, 15, 15, 15, 8,
	17, 17, 18, 19, 19, 20, 35, 35, 21, 21,
	22, 22, 32, 32, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 31, 31, 30, 30, 36, 28, 29,
	27,
}

var yyR2 = [...]int{
	0, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	5, 5, 4, 4, 1, 3, 3, 1, 0, 1,
	4, 3, 1, 2, 4, 8, 1, 2, 2, 1,
	2, 3, 2, 1, 2, 2, 4, 4, 4, 4,
	3, 1, 3, 1, 0, 1, 2, 2, 2, 8,
	1, 2, 8, 1, 2, 8, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -41, -1, -4, -3, -2, -6, -7, -5, -8,
	12, 6, 9, 7, 8, 10, 11, 4, -28, 4,
	-28, -28, -28, -14, -15, 25, 26, -32, 9, 7,
	8, -33, -29, 15, 13, 14, 16, 17, 18, 19,
	4, -28, 29, 31, -9, 29, -12, 29, -24, 22,
	-27, 35, 4, -27, -27, -9, -12, -24, 15, 16,
	29, -41, -30, -29, 5, 27, -10, -11, -28, 27,
	-13, -14, 27, 32, -39, -38, -37, 38, 36, -27,
	-38, -37, -17, -18, 21, 30, 27, -40, 28, 31,
	30, -14, -32, 27, -30, -31, -30, 27, 27, 27,
	30, -18, -28, 30, -11, -30, -27, 39, 37, 31,
	29, 33, -36, 5, -19, -20, -35, -32, 20, 29,
	27, 30, -20, -28, -23, -26, -25, -34, 23, 24,
	31, 32, 30, -26, -16, -34, -14, 20, -30, 34,
	-36, -21, 20, -22, -32, 27, 34, 27, 33, 28,
	31, -32, -36, 27,
}

var yyDef = [...]int{
	1, -2, 2, 3, 4, 5, 6, 7, 8, 9,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 35, 0, 0, 0, 45, 0, 0,
	0, 62, 63, 64, 65, 67, 68, 70, 71, 72,
	79, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 80, 0, 0, 46, 47, 48, 66, 69,
	0, 0, 0, 75, 76, 12, 18, 14, 17, 20,
	0, 22, 24, 0, 0, 43, 41, 0, 74, 0,
	0, 0, 0, 50, 0, 10, 11, 0, 19, 0,
	21, 23, 0, 36, 0, 0, 73, 37, 38, 39,
	0, 51, 0, 13, 15, 16, 0, 42, 40, 0,
	0, 0, 0, 77, 0, 53, 0, 56, 57, 0,
	49, 0, 54, 0, 0, 26, 0, 29, 0, 0,
	0, 0, 25, 27, 28, 30, 33, 0, 0, 32,
	0, 0, 58, 59, 60, 34, 31, 52, 0, 0,
	0, 61, 0, 55,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	32, 33, 35, 3, 28, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 34, 27,
	36, 31, 37, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 38, 3, 39, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 29, 3, 30,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:78
		{
			if yyDollar[2].def != nil {
				syms := yylex.(*Lexer).output
				syms.Symbols = append(syms.Symbols, yyDollar[2].def)
				syms.SymbolMap[yyDollar[2].def.getsym().getx()] = yyDollar[2].def
			}
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:98
		{
			yyVAL.def = nil
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:103
		{
			yyVAL.def = &rpc_const{yyDollar[2].idval, yyDollar[4].idval, nonEmpty(yyDollar[1].tok.BlockComment, yyDollar[5].tok.LineComment)}
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:108
		{
			yyVAL.def = &rpc_enum{yyDollar[2].idval, yyDollar[3].constlist, yyDollar[1].tok.BlockComment}
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:113
		{
			yyVAL.constlist = yyDollar[2].constlist
			yyVAL.constlist[len(yyVAL.constlist)-1].comment = nonEmpty(yyVAL.constlist[len(yyVAL.constlist)-1].comment, yyDollar[3].comment)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:119
		{
			yyVAL.constlist = []rpc_const{yyDollar[1].cnst}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:123
		{
			last := &yyDollar[1].constlist[len(yyDollar[1].constlist)-1]
			last.comment = nonEmpty(yyDollar[2].tok.LineComment, last.comment)
			yyVAL.constlist = append(yyDollar[1].constlist, yyDollar[3].cnst)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:130
		{
			tag := rpc_const{yyDollar[1].idval, yyDollar[3].idval, nonEmpty(yyDollar[1].idval.comment, yyDollar[3].idval.comment)}
			yylex.(*Lexer).output.SymbolMap[yyDollar[1].idval.getx()] = &tag
			yyVAL.cnst = tag
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:136
		{
			yylex.(*Lexer).Warn("RFC4506 requires a value for each enum tag")
			yyVAL.cnst = rpc_const{yyDollar[1].idval, lid("iota"), yyDollar[1].idval.comment}
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:141
		{
			yyVAL.comment = ""
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:143
		{
			yyVAL.comment = yyDollar[1].tok.LineComment
			yylex.(*Lexer).
				Warn("RFC4506 disallows comma after last enum tag")
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:150
		{
			yyVAL.def = &rpc_struct{yyDollar[2].idval, yyDollar[3].decllist, yyDollar[1].tok.BlockComment}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:155
		{
			yyVAL.decllist = yyDollar[2].decllist
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:160
		{
			yyVAL.decllist = []rpc_decl{yyDollar[1].decl}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:164
		{
			yyVAL.decllist = append(yyDollar[1].decllist, yyDollar[2].decl)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:169
		{
			ret := yyDollar[3].ubody // Copy it
			ret.id = yyDollar[2].idval
			ret.comment = yyDollar[1].tok.BlockComment
			yyVAL.def = &ret
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parse.y:177
		{
			yyVAL.ubody = yyDollar[7].ubody
			yyVAL.ubody.tagtype = yyDollar[3].idval
			yyVAL.ubody.tagid = yyDollar[4].idval
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:184
		{
			yyVAL.ubody = rpc_union{
				fields:     []rpc_ufield{yyDollar[1].ufield},
				hasdefault: yyDollar[1].ufield.hasdefault,
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:191
		{
			yyVAL.ubody = yyDollar[1].ubody
			if !yyVAL.ubody.hasdefault {
				yyVAL.ubody.fields = append(yyVAL.ubody.fields, yyDollar[2].ufield)
				yyVAL.ubody.hasdefault = yyDollar[2].ufield.hasdefault
			} else if !yyDollar[2].ufield.hasdefault {
				n := len(yyVAL.ubody.fields)
				yyVAL.ubody.fields = append(yyVAL.ubody.fields, yyVAL.ubody.fields[n])
				yyVAL.ubody.fields[n] = yyDollar[2].ufield
			} else {
				yylex.Error("duplicate default case")
			}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:206
		{
			yyVAL.ufield = yyDollar[1].ufield
			yyVAL.ufield.decl = yyDollar[2].decl
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:212
		{
			yyVAL.ufield = rpc_ufield{}
			if yyDollar[1].idval.getx() == "" {
				yyVAL.ufield.hasdefault = true
				yyVAL.ufield.cases = []idval{}
			} else {
				yyVAL.ufield.cases = []idval{yyDollar[1].idval}
			}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:222
		{
			yyVAL.ufield = yyDollar[1].ufield
			if yyDollar[2].idval.getx() != "" {
				yyVAL.ufield.cases = append(yyVAL.ufield.cases, yyDollar[2].idval)
			} else if !yyVAL.ufield.hasdefault {
				yyVAL.ufield.hasdefault = true
			} else {
				yylex.Error("duplicate default case")
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:233
		{
			yyVAL.idval = yyDollar[2].idval
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:236
		{
			yyVAL.idval.setlocal("")
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:240
		{
			yyVAL.decl = rpc_decl{qual: SCALAR, typ: lid("void")}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:245
		{
			ret := rpc_typedef(yyDollar[2].decl)
			if yyDollar[1].tok.BlockComment != "" {
				ret.comment = yyDollar[1].tok.BlockComment
			}
			yyVAL.def = &ret
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:254
		{
			yyVAL.decl = yyDollar[1].decl
			yyVAL.decl.id = yyDollar[2].idval
			yyVAL.decl.qual = yyDollar[3].arrayqual.qual
			yyVAL.decl.bound = yyDollar[3].arrayqual.bound
			yyVAL.decl.comment = nonEmpty(yyDollar[1].decl.comment, yyDollar[4].tok.LineComment)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:262
		{
			yyVAL.decl = yyDollar[1].decl
			yyVAL.decl.id = yyDollar[3].idval
			yyVAL.decl.qual = PTR
			yyVAL.decl.comment = nonEmpty(yyDollar[1].decl.comment, yyDollar[4].tok.LineComment)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:269
		{
			yyVAL.decl.id = yyDollar[2].idval
			yyVAL.decl.typ.setlocal("byte")
			yyVAL.decl.qual = yyDollar[3].arrayqual.qual
			yyVAL.decl.bound = yyDollar[3].arrayqual.bound
			yyVAL.decl.comment = nonEmpty(yyDollar[1].tok.BlockComment, yyDollar[4].tok.LineComment)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:277
		{
			yyVAL.decl.id = yyDollar[2].idval
			yyVAL.decl.typ.setlocal("string")
			yyVAL.decl.qual = SCALAR
			yyVAL.decl.bound = yyDollar[3].arrayqual.bound
			yyVAL.decl.comment = nonEmpty(yyDollar[1].tok.BlockComment, yyDollar[4].tok.LineComment)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:287
		{
			yyVAL.arrayqual.qual = VEC
			yyVAL.arrayqual.bound = yyDollar[2].idval
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:294
		{
			yyVAL.arrayqual.qual = ARRAY
			yyVAL.arrayqual.bound = yyDollar[2].idval
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:301
		{
			yyVAL.arrayqual.qual = SCALAR
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:306
		{
			yyVAL.decl = rpc_decl{typ: yyDollar[1].idval, comment: yyDollar[1].idval.comment}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:310
		{
			yyVAL.decl = rpc_decl{inline_decl: &rpc_enum{tags: yyDollar[2].constlist},
				comment: yyDollar[1].tok.BlockComment}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:315
		{
			yyVAL.decl = rpc_decl{inline_decl: &rpc_struct{decls: yyDollar[2].decllist,
				comment: yyDollar[1].tok.BlockComment}}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:320
		{
			decl := yyDollar[2].ubody
			decl.comment = yyDollar[1].tok.BlockComment
			yyVAL.decl.inline_decl = &decl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parse.y:327
		{
			ret := yyDollar[4].prog
			ret.id = yyDollar[2].idval
			ret.val = yyDollar[7].num
			yyVAL.def = &ret
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:335
		{
			yyVAL.prog.vers = []rpc_vers{yyDollar[1].vers}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:339
		{
			yyVAL.prog = yyDollar[1].prog
			yyVAL.prog.vers = append(yyDollar[1].prog.vers, yyDollar[2].vers)
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parse.y:345
		{
			yyVAL.vers = yyDollar[4].vers
			yyVAL.vers.id = yyDollar[2].idval
			yyVAL.vers.val = yyDollar[7].num
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:352
		{
			yyVAL.vers.procs = []rpc_proc{yyDollar[1].proc}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:356
		{
			yyVAL.vers.procs = append(yyDollar[1].vers.procs, yyDollar[2].proc)
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parse.y:361
		{
			yyVAL.proc = yyDollar[4].proc
			yyVAL.proc.res = yyDollar[1].idval
			yyVAL.proc.id = yyDollar[2].idval
			yyVAL.proc.val = yyDollar[7].num
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:370
		{
			yyVAL.idval.setglobal("XdrVoid")
			yyVAL.idval.xid = "void"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:375
		{
			yyVAL.proc = rpc_proc{}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:378
		{
			yyVAL.proc = rpc_proc{arg: []idval{yyDollar[1].idval}}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:382
		{
			yyVAL.proc.arg = append(yyVAL.proc.arg, yyDollar[3].idval)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:388
		{
			yyVAL.idval.setlocal("int32")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:389
		{
			yyVAL.idval.setlocal("bool")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:390
		{
			yyVAL.idval.setlocal("uint32")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:391
		{
			yylex.(*Lexer).
				Warn("RFC4506 requires \"int\" after \"unsigned\"")
			yyVAL.idval.setlocal("uint32")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:397
		{
			yyVAL.idval.setlocal("int64")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:398
		{
			yyVAL.idval.setlocal("uint64")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:399
		{
			yyVAL.idval.setlocal("float32")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:400
		{
			yyVAL.idval.setlocal("float64")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:401
		{
			yyVAL.idval.setlocal("float128")
			yyVAL.idval.comment = yyDollar[1].tok.BlockComment
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:405
		{
			yyVAL.idval.setlocal("")
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:409
		{
			yyVAL.idval = gid(yyDollar[1].tok.Value)
			yyVAL.idval.comment = yyDollar[1].tok.LineComment
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:416
		{
			val, err := strconv.ParseUint(yyDollar[1].tok.Value, 0, 32)
			if err != nil {
				yylex.Error(err.Error() + " at " + yyDollar[1].tok.Value)
			}
			yyVAL.num = uint32(val)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:425
		{
			yylex.(*Lexer).Checkdup(yyDollar[1].tok.Value)
			yyVAL.idval = gid(yyDollar[1].tok.Value)
			yyVAL.idval.comment = nonEmpty(yyDollar[1].tok.BlockComment, yyDollar[1].tok.LineComment)
			if yyVAL.idval.xid != "" && yyVAL.idval.xid[0] == '_' {
				yylex.(*Lexer).Warn(
					"RFC4506 disallows '_' as first character of identifier")
			}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:436
		{
			yyVAL.idval = gid(yyDollar[1].tok.Value)
			yyVAL.idval.comment = nonEmpty(yyDollar[1].tok.BlockComment, yyDollar[1].tok.LineComment)
			switch yyVAL.idval.xid {
			case "TRUE":
				yyVAL.idval.goid = "true"
			case "FALSE":
				yyVAL.idval.goid = "false"
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:447
		{
			yyVAL.idval = gid(yyDollar[1].tok.Value)
			yyVAL.idval.comment = nonEmpty(yyDollar[1].tok.BlockComment, yyDollar[1].tok.LineComment)
			if yyVAL.idval.xid != "" && yyVAL.idval.xid[0] == '_' {
				yylex.(*Lexer).Warn(
					"RFC4506 disallows '_' as first character of identifier")
			}
		}
	}
	goto yystack /* stack new state and value */
}
