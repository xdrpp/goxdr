// Code generated by goxdr -enum-comments -p rpc_test -o rpc/prot_test.go rpc/prot_test.x; DO NOT EDIT.

package rpc_test
import "fmt"
import "context"
import . "github.com/xdrpp/goxdr/xdr"

var _ XDR
var _ = fmt.Sprintf
var _ context.Context

//
// Data types defined in XDR file
//

type BigString = string

type TEST_V1 interface {
	Test_null()
	Test_inc(int32) int32
	Test_add(int32, int32) int32
	Test_string(BigString) BigString
}

//
// Helper types and generated marshaling functions
//

type XdrType_BigString struct {
	XdrString
}
func XDR_BigString(v *BigString) XdrType_BigString {
	return XdrType_BigString{XdrString{v, 0xffffffff}}
}
func (XdrType_BigString) XdrTypeName() string { return "BigString" }
func (v XdrType_BigString) XdrUnwrap() XdrType { return v.XdrString }

type xdrProc_Test_null struct {
	Arg *XdrVoid
	Res *XdrVoid
}
func (xdrProc_Test_null) Prog() uint32 { return 591316088 }
func (xdrProc_Test_null) Vers() uint32 { return 1 }
func (xdrProc_Test_null) Proc() uint32 { return 0 }
func (xdrProc_Test_null) ProgName() string { return "TEST_PROG" }
func (xdrProc_Test_null) VersName() string { return "TEST_V1" }
func (xdrProc_Test_null) ProcName() string { return "test_null" }
func (p *xdrProc_Test_null) GetArg() XdrType {
	if p.Arg == nil {
		p.Arg = new(XdrVoid)
	}
	return XDR_XdrVoid(p.Arg)
}
func (p *xdrProc_Test_null) GetRes() XdrType {
	if p.Res == nil {
		p.Res = new(XdrVoid)
	}
	return XDR_XdrVoid(p.Res)
}
var _ XdrProc = &xdrProc_Test_null{} // XXX

type xdrSrvProc_Test_null struct {
	xdrProc_Test_null
	Srv TEST_V1
}
func (p *xdrSrvProc_Test_null) SetContext(ctx context.Context) {
	if wc, ok := p.Srv.(interface {
		WithContext(context.Context) TEST_V1
	}); ok {
		p.Srv = wc.WithContext(ctx)
	}
}
func (p *xdrSrvProc_Test_null) Do() {
	p.Srv.Test_null()
}
var _ XdrSrvProc = &xdrSrvProc_Test_null{} // XXX

type xdrProc_Test_inc struct {
	Arg *int32
	Res *int32
}
func (xdrProc_Test_inc) Prog() uint32 { return 591316088 }
func (xdrProc_Test_inc) Vers() uint32 { return 1 }
func (xdrProc_Test_inc) Proc() uint32 { return 1 }
func (xdrProc_Test_inc) ProgName() string { return "TEST_PROG" }
func (xdrProc_Test_inc) VersName() string { return "TEST_V1" }
func (xdrProc_Test_inc) ProcName() string { return "test_inc" }
func (p *xdrProc_Test_inc) GetArg() XdrType {
	if p.Arg == nil {
		p.Arg = new(int32)
	}
	return XDR_int32(p.Arg)
}
func (p *xdrProc_Test_inc) GetRes() XdrType {
	if p.Res == nil {
		p.Res = new(int32)
	}
	return XDR_int32(p.Res)
}
var _ XdrProc = &xdrProc_Test_inc{} // XXX

type xdrSrvProc_Test_inc struct {
	xdrProc_Test_inc
	Srv TEST_V1
}
func (p *xdrSrvProc_Test_inc) SetContext(ctx context.Context) {
	if wc, ok := p.Srv.(interface {
		WithContext(context.Context) TEST_V1
	}); ok {
		p.Srv = wc.WithContext(ctx)
	}
}
func (p *xdrSrvProc_Test_inc) Do() {
	r := p.Srv.Test_inc(*p.Arg)
	p.Res = &r

}
var _ XdrSrvProc = &xdrSrvProc_Test_inc{} // XXX

type xdrProcArg_Test_add struct {
	a1 *int32
	a2 *int32
}
func (v *xdrProcArg_Test_add) XdrPointer() interface{} { return v }
func (xdrProcArg_Test_add) XdrTypeName() string { return "xdrProcArg_Test_add" }
func (v xdrProcArg_Test_add) XdrValue() interface{} { return v }
func (v *xdrProcArg_Test_add) XdrMarshal(x XDR, name string) { x.Marshal(name, v) }
func (v *xdrProcArg_Test_add) XdrRecurse(x XDR, name string) {
	if name != "" {
		name = x.Sprintf("%s.", name)
	}
	if v.a1 == nil { v.a1 = new(int32) }
	XDR_int32(v.a1).XdrMarshal(x, x.Sprintf("%sa1", name))
	if v.a2 == nil { v.a2 = new(int32) }
	XDR_int32(v.a2).XdrMarshal(x, x.Sprintf("%sa2", name))
}
func XDR_xdrProcArg_Test_add(v *xdrProcArg_Test_add) *xdrProcArg_Test_add { return v }
var _ XdrType = &xdrProcArg_Test_add{} // XXX

type xdrProc_Test_add struct {
	Arg *xdrProcArg_Test_add
	Res *int32
}
func (xdrProc_Test_add) Prog() uint32 { return 591316088 }
func (xdrProc_Test_add) Vers() uint32 { return 1 }
func (xdrProc_Test_add) Proc() uint32 { return 2 }
func (xdrProc_Test_add) ProgName() string { return "TEST_PROG" }
func (xdrProc_Test_add) VersName() string { return "TEST_V1" }
func (xdrProc_Test_add) ProcName() string { return "test_add" }
func (p *xdrProc_Test_add) GetArg() XdrType {
	if p.Arg == nil {
		p.Arg = new(xdrProcArg_Test_add)
	}
	return XDR_xdrProcArg_Test_add(p.Arg)
}
func (p *xdrProc_Test_add) GetRes() XdrType {
	if p.Res == nil {
		p.Res = new(int32)
	}
	return XDR_int32(p.Res)
}
var _ XdrProc = &xdrProc_Test_add{} // XXX

type xdrSrvProc_Test_add struct {
	xdrProc_Test_add
	Srv TEST_V1
}
func (p *xdrSrvProc_Test_add) SetContext(ctx context.Context) {
	if wc, ok := p.Srv.(interface {
		WithContext(context.Context) TEST_V1
	}); ok {
		p.Srv = wc.WithContext(ctx)
	}
}
func (p *xdrSrvProc_Test_add) Do() {
	r := p.Srv.Test_add(*p.Arg.a1, *p.Arg.a2)
	p.Res = &r

}
var _ XdrSrvProc = &xdrSrvProc_Test_add{} // XXX

type xdrProc_Test_string struct {
	Arg *BigString
	Res *BigString
}
func (xdrProc_Test_string) Prog() uint32 { return 591316088 }
func (xdrProc_Test_string) Vers() uint32 { return 1 }
func (xdrProc_Test_string) Proc() uint32 { return 3 }
func (xdrProc_Test_string) ProgName() string { return "TEST_PROG" }
func (xdrProc_Test_string) VersName() string { return "TEST_V1" }
func (xdrProc_Test_string) ProcName() string { return "test_string" }
func (p *xdrProc_Test_string) GetArg() XdrType {
	if p.Arg == nil {
		p.Arg = new(BigString)
	}
	return XDR_BigString(p.Arg)
}
func (p *xdrProc_Test_string) GetRes() XdrType {
	if p.Res == nil {
		p.Res = new(BigString)
	}
	return XDR_BigString(p.Res)
}
var _ XdrProc = &xdrProc_Test_string{} // XXX

type xdrSrvProc_Test_string struct {
	xdrProc_Test_string
	Srv TEST_V1
}
func (p *xdrSrvProc_Test_string) SetContext(ctx context.Context) {
	if wc, ok := p.Srv.(interface {
		WithContext(context.Context) TEST_V1
	}); ok {
		p.Srv = wc.WithContext(ctx)
	}
}
func (p *xdrSrvProc_Test_string) Do() {
	r := p.Srv.Test_string(*p.Arg)
	p.Res = &r

}
var _ XdrSrvProc = &xdrSrvProc_Test_string{} // XXX

func init() {
	XdrCatalog[591316088<<32|1] = func(p uint32) XdrProc {
		switch(p) {
		case 0:
			return &xdrProc_Test_null{}
		case 1:
			return &xdrProc_Test_inc{}
		case 2:
			return &xdrProc_Test_add{}
		case 3:
			return &xdrProc_Test_string{}
		}
		return nil
	}
}

type TEST_V1_Server struct {
	Srv TEST_V1
}
func (TEST_V1_Server) Prog() uint32 { return 591316088 }
func (TEST_V1_Server) Vers() uint32 { return 1 }
func (TEST_V1_Server) ProgName() string { return "TEST_PROG" }
func (TEST_V1_Server) VersName() string { return "TEST_V1" }
func (s TEST_V1_Server) GetProc(p uint32) XdrSrvProc {
	switch p {
	case 0:  // test_null
		return &xdrSrvProc_Test_null{ Srv: s.Srv }
	case 1:  // test_inc
		return &xdrSrvProc_Test_inc{ Srv: s.Srv }
	case 2:  // test_add
		return &xdrSrvProc_Test_add{ Srv: s.Srv }
	case 3:  // test_string
		return &xdrSrvProc_Test_string{ Srv: s.Srv }
	default:
		return nil
	}
}
var _ XdrSrv = TEST_V1_Server{} // XXX

type TEST_V1_Client struct {
	Send XdrSendCall
	Ctx context.Context
}
var _ TEST_V1 = TEST_V1_Client{} // XXX
func (c TEST_V1_Client) WithContext(ctx context.Context) TEST_V1 {
	c.Ctx = ctx
	return c
}
func (c TEST_V1_Client) Test_null() {
	var proc xdrProc_Test_null
	if err := c.Send.SendCall(c.Ctx, &proc); err != nil {
		panic(err)
	}
}
func (c TEST_V1_Client) Test_inc(a1 int32) int32 {
	var proc xdrProc_Test_inc
	proc.Arg = &a1
	if err := c.Send.SendCall(c.Ctx, &proc); err != nil {
		panic(err)
	}
	return *proc.Res
}
func (c TEST_V1_Client) Test_add(a1 int32, a2 int32) int32 {
	var proc xdrProc_Test_add
	proc.GetArg()
	proc.Arg.a1 = &a1
	proc.Arg.a2 = &a2
	if err := c.Send.SendCall(c.Ctx, &proc); err != nil {
		panic(err)
	}
	return *proc.Res
}
func (c TEST_V1_Client) Test_string(a1 BigString) BigString {
	var proc xdrProc_Test_string
	proc.Arg = &a1
	if err := c.Send.SendCall(c.Ctx, &proc); err != nil {
		panic(err)
	}
	return *proc.Res
}
